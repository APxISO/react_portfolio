sidebar.js

return (
    <Box
      sx={{
        "& .pro-sidebar-inner": {
          background: `${colors.primary[400]} !important`,
        },
        "& .pro-icon-wrapper": {
          backgroundColor: "transparent !important",
        },
        "& .pro-inner-item": {
          padding: "5px 35px 5px 20px !important",
        },
        "& .pro-inner-item:hover": {
          color: "#868dfb !important",
        },
        "& .pro-menu-item.active": {
          color: "#6870fa !important",
        },
      }}
    >
      <ProSidebar collapsed={isCollapsed}>
        <Menu iconShape="square">
          {/* LOGO AND MENU ICON */}
          <MenuItem
            onClick={() => setIsCollapsed(!isCollapsed)}
            icon={isCollapsed ? <MenuOutlinedIcon /> : undefined}
            style={{
              margin: "10px 0 20px 0",
              color: colors.grey[100],
            }}
          >
            {!isCollapsed && (
              <Box
                display="flex"
                justifyContent="space-between"
                alignItems="center"
                ml="15px"
              >
                <Typography variant="h3" color={colors.grey[100]}>
                Tourn. Dir.
                </Typography>
                <IconButton onClick={() => setIsCollapsed(!isCollapsed)}>
                  <MenuOutlinedIcon />
                </IconButton>
              </Box>
            )}
          </MenuItem>

          {!isCollapsed && (
            <Box mb="25px">
              <Box display="flex" justifyContent="center" alignItems="center">
                <img
                  alt="profile-user"
                  width="100px"
                  height="100px"
                  src={`../../assets/user.png`}
                  style={{ cursor: "pointer", borderRadius: "50%" }}
                />
              </Box>
              <Box textAlign="center">
                <Typography
                  variant="h2"
                  color={colors.grey[100]}
                  fontWeight="bold"
                  sx={{ m: "10px 0 0 0" }}
                >
                  USER NAME
                </Typography>
                <Typography variant="h5" color={colors.greenAccent[500]}>
                  USER TITLE
                </Typography>
              </Box>
            </Box>
          )}

          <Box paddingLeft={isCollapsed ? undefined : "10%"}>
            
            <Item
              title="My Task List"
              to="/mytasklist"
              icon={<ListAltOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />  

            <Item
              title="Task Progress"
              to="/taskprogress"
              icon={<LeaderboardOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />  

            <Item
              title="Previous Submissions"
              to="/previoussubmissions"
              icon={<AccessTimeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />  
            <Item
              title=" Manage Staff"
              to="/staff"
              icon={<PeopleIcon/>}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="ADMIN Manage Tasks"
              to="/managetasks"
              icon={<FactCheckOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="ADMIN Manage Staff"
              to="/managestaff"
              icon={<ContactsOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="ADMIN Task Progress"
              to="/admintaskprogress"
              icon={<LeaderboardOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="STAFF My Task List"
              to="/staffmytasklist"
              icon={<ListAltOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="STAFF Previous Submissions"
              to="/staffprevioussubmissions"
              icon={<AccessTimeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
            />
            <Item
              title="Login"
              to="/login"
              icon={<LoginIcon />}
              selected={selected}
              setSelected={setSelected}
            />
          </Box>
        </Menu>
      </ProSidebar>
    </Box>
  );
};

export default Sidebar;


client/app.js

import React, { useState, useEffect } from 'react'; 
import { CssBaseline, ThemeProvider } from "@mui/material";
import { ColorModeContext, useMode } from "./theme";
import Topbar from "./scenes/global/Topbar"
import Header from "./scenes/global/Header";
import Sidebar from "./scenes/global/Sidebar"
import { Route, Routes  } from "react-router-dom";
import MyTaskList from "./scenes/director/myTaskList/MyTaskList";
import TaskProgress from "./scenes/director/taskProgress/TaskProgress";
import PreviousSubmissions from "./scenes/director/previousSubmissions/PreviousSubmissions"
import Staff from "./scenes/director/staff/Staff";
import SingleSurvey from "./components/SingleSurvey";
import ManageTasks from "./scenes/admin/manageTasks/ManageTasks";
import ManageStaff from "./scenes/admin/managaeStaff/ManageStaff";
import AdminTaskProgress from "./scenes/admin/adminTaskProgress/AdminTaskProgress";
import StaffMyTaskList from "./scenes/staff/staffMyTaskList/MyTaskList";
import StaffPreviousSubmissions from "./scenes/staff/staffPreviousSubmissions/StaffPreviousSubmissions";
import Login from "./scenes/login/Login";
import Dashboard from "./scenes/Dashboard";


function App() {
  const [theme, colorMode] = useMode()
  const [user, setUser] = useState(null);
    const [token, setToken] = useState(localStorage.getItem("token") || "");
    



    const handleUserLogin = (userData, userToken) => {
      setUser(userData);
      setToken(userToken);
      localStorage.setItem('token', userToken);
    };

    const fetchUser = async () => {
      const lsToken = localStorage.getItem("token");
  
      if (!lsToken) {
        console.log("No token found, user is not logged in.");
        return; // Exit the function if there's no token
      }

      setToken(lsToken);

      try {
        const response = await fetch(`/api/users/me`, {
          headers: {
            Authorization: `Bearer ${lsToken}`,
          },
        });

        const data = await response.json();
        console.log(data);

        if (!data.error) {
          setUser(data);
        } else {
          console.error(data.error);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };


    useEffect(() => {
      fetchUser();
    }, [token]);

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline/>
    <div className="app">
      <Sidebar user={user} setUser={setUser} setToken={setToken} token={token}/>
      <main className="content">
        {/* <Header/> */}
        <Topbar/> 
        <Routes>
        <Route path="/" element={<Dashboard/>}/>

        <Route path="/mytasklist" element={<MyTaskList />} />
        <Route path="/taskProgress" element={<TaskProgress />} />
        <Route path="/previousSubmissions" element={<PreviousSubmissions />} />
        <Route path="/staff" element={<Staff />} />
        <Route path="/singleSurvey" element={<SingleSurvey />} />
        <Route path="/manageTasks" element={<ManageTasks />} />
        <Route path="/manageStaff" element={<ManageStaff />} />
        <Route path="/adminTaskProgress" element={<AdminTaskProgress />} />
        <Route path="/staffMyTaskList" element={<StaffMyTaskList />} />
        <Route path="/staffPreviousSubmissions" element={<StaffPreviousSubmissions />} />
        <Route path="/login" element={<Login handleUserLogin={handleUserLogin} />} />
        </Routes> 
      </main>
    </div>
    </ThemeProvider>
    </ColorModeContext.Provider>
  );
}

export default App;


api/userrouter.js

const express = require("express");
const userRouter = express.Router();
const jwt = require("jsonwebtoken");

const {
  createUser,
  getUser,
  getUserById,
  getUserByEmail,
  getAllUsers,
  updateUserById,
  deleteUserById
} = require("../server/users");



userRouter.use((req, res, next) => {
  console.log("A request is being made to /users...");
  next();
});


// TOKEN VERIFICATION FOR USERS
function authenticateToken(req, res, next) {
  const authHeader = req.headers['authorization'];
  const token = authHeader && authHeader.split(' ')[1]; //Bearer TOKEN


  if (!token || token == null) {
    console.log("No token provided");
    return res.sendStatus(401);
  }

  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) {
      console.log("Token verification error:", err.message);
      return res.sendStatus(403);
    }
    req.user = user;
    console.log("Token verified, user ID:", user.id);
    next();
  });
}


// TESTED AND WORKS
userRouter.post("/register", async (req, res, next) => {
  try {
    const { username, password } = req.body;

    if (password.length < 8) {
      return res.status(400).send("Password too short, must be at least 8 characters");
    }

    const user = await createUser(req.body);
    
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, { expiresIn: '1w' });
    
    res.status(201).send({ user: {id: user.id, username: user.username, email: user.email, role: user.role_name }, token });
    console.log('New user successfully created!', {id: user.id, user: { username: user.username, email: user.email, role: user.role_name }}  )
  } catch (error) {
    next(error);
  }
});


//TESTED AND WORKS
userRouter.post("/login", async (req, res, next) => {
  try {
    const {email, password} = req.body;
    const user = await getUser({email, password});
    if (!user) {
      return res.status(401).send({ message: "Incorrect email or password" });
    }

    const token = jwt.sign({ id: user.user_id }, process.env.JWT_SECRET, { expiresIn: '1w' });
    console.log(`User ${user.email} credentials match, login successful!`);
    res.send({ user: { email: user.email, id: user.user_id }, token });
    
  } catch (error) {
    console.log(error.message)
    res.status(500).send({error: "Server error occurred"})
  }
});



// TESTED AND WORKS
userRouter.get("/me", authenticateToken, async (req, res, next) => {
  if (!req.user || !req.user.id) {
    console.log("req.user or req.user.id is undefined");
    return res.status(401).send({ error: "Invalid token or user not found" });
  }
  try {
    console.log("Fetching user details for ID:", req.user.id);
    const userDetails = await getUserById(req.user.id);
    if (!userDetails) {
      console.log("User not found for ID:", req.user.id);
      return res.status(404).send({ error: "User not found" });
    }
    delete userDetails.password
    console.log("User details found:", userDetails);
    res.send(userDetails);
  } catch (error) {
    console.error("Error in /me route:", error);
    res.status(500).send({message: "Server error occured"})
    next(error);
  }
});


// TESTED AND WORKS
userRouter.get("/email", async (req, res, next) => {
  const email = req.query.email;
  if (!email) {
    return req.status(400).send({message: 'Email parameter is required'})
  }
  try {
    const user = await getUserByEmail(email);
    if (!user) {
        return res.status(404).send({message: 'User not found'})
    }
    res.json(user)
  } catch (error) {
    console.error('Error fetching user by email: ', error)
    res.status(500).send('Sever error')
  }
});


// TESTED AND WORKS
userRouter.patch("/:userId", async (req, res, next) => {
  try {
    const { userId } = req.params; // Extract userId from the URL parameters
    const updateData = req.body; // Extract the data to be updated from the request body

    // Call the updateUserById function with userId and updateData
    const updatedUser = await updateUserById(userId, updateData);

    if (!updatedUser) {
      return res.status(404).send({ error: "User not found or no update was made" });
    }

    
    res.send(updatedUser);
    
  } catch (error) {
    next(error);
  }
});


// TESTED AND WORKS
userRouter.delete("/:userId", async (req, res, next) => {
  try {
    const { userId } = req.params; // Extract userId from the URL parameters

    // Call the deleteUserById function with userId
    const deletedUser = await deleteUserById(userId);

    if (!deletedUser) {
      return res.status(404).send({ error: "User not found" });
    }

    res.status(200).send({ message: "User successfully deleted", deletedUser });
  } catch (error) {
    next(error);
  }
});


// TESTED AND WORKS
userRouter.get('/:userId', async (req, res) => {
    try {
      const { userId } = req.params;
      const user = await getUserById(userId);
      if (user) {
        res.json(user);
      } else {
        res.status(404).send('User not found');
      }
    } catch (error) {
      console.error(error);
      res.status(500).send('Server error');
    }
  });
  

// TESTED AND WORKS
userRouter.get("/", async (req, res, next) => {
    try {
      const users = await getAllUsers();
      res.send(users);
    } catch (error) {
      next(error);
    }
  });

module.exports = userRouter;

db/users.js

const bcrypt = require("bcrypt");
const pool = require("./db");


const createUser = async ({ username, email, password, isAdmin = false, parent_tourn = null, role_name = 'Staff' }) => {
    try {
      // Check if user already exists
      const existingUser = await getUserByEmail(email);
      if (existingUser) {
        throw new Error(`Email ${email} is already taken`);
      }
  
      const hashPassword = await bcrypt.hash(password, 10);
      const { rows: [newUser] } = await pool.query(
        `INSERT INTO users (username, email, password, isadmin, parent_tourn, role_name) VALUES ($1, $2, $3, $4, $5, $6) RETURNING user_id, username, email, role_name;`,
        [username, email, hashPassword, isAdmin, parent_tourn, role_name]
      );
  
      return newUser;
    } catch (err) {
      throw new Error(`Error creating user: ${err.message}`);
    }
  };
  

  const getUserById = async (userId) => {
    try {
      const { rows: [user] } = await pool.query(
        `SELECT user_id, username, email, role_name, isadmin, parent_tourn FROM users WHERE user_id = $1`,
        [userId]
      );
      return user;
    } catch (error) {
      throw new Error(`Error fetching user by ID: ${error.message}`);
    }
  };
  

const getUser = async ({ email, password }) => {
  try {
    const { rows: [user] } = await pool.query(
      `SELECT * FROM users WHERE email = $1`,
      [email]
    );

    if (!user) {
      throw { name: "loginError", message: "Incorrect email" };
    }

    const passwordsMatch = await bcrypt.compare(password, user.password);
    if (passwordsMatch) {
      delete user.password;
      return user;
    } else {
      throw { name: "loginError", message: "Incorrect password" };
    }
  } catch (error) {
    throw error;
  }
};

const getUserByEmail = async (email) => {
  try {
    console.log(`Fetching user with email: ${email}`)
    const { rows } = await pool.query(`SELECT user_id, username, email, role_name, isadmin, parent_tourn FROM users WHERE email = $1`, [email]);
    console.log(`User successfully fetched by email!`)
   return rows.length ? rows[0] : null
   
  } catch (error) {
    throw new Error(`Error fetching user by email ${error.message}`);
  }
};

const getAllUsers = async () => {
  try {
    const { rows: users } = await pool.query(`SELECT user_id, username, email, role_name, parent_tourn FROM users;`);
    console.log("All users have been successfully delivered!")
    return users;
    
  } catch (error) {
    throw error;
  }
};

const updateUserById = async (userId, updateData) => {
  // Exclude the password from the updateData object if it exists
  const { password, ...filteredUpdateData } = updateData;

  let updates = [];
  let values = [];
  let counter = 1;

  // Dynamically add parts to the query and values array based on provided data, excluding password
  Object.keys(filteredUpdateData).forEach(key => {
    if (filteredUpdateData[key] !== undefined) {
      updates.push(`${key} = $${counter}`);
      values.push(filteredUpdateData[key]);
      counter++;
    }
  });

  // If there are no fields to update after filtering out the password, throw an error
  if (updates.length === 0) {
    throw new Error("No valid or allowed fields provided for update.");
  }

  // Construct the SQL query
  let query = `UPDATE users SET ${updates.join(", ")} WHERE user_id = $${counter} RETURNING user_id, username, email, role_name, isadmin;`;
  values.push(userId);

  try {
    const { rows: [updatedUser] } = await pool.query(query, values);
    if (!updatedUser) {
      throw new Error(`User with ID ${userId} does not exist.`);
    }
    return updatedUser;
  } catch (error) {
    throw new Error(`Error updating user: ${error.message}`);
  }
};



const deleteUserById = async (userId) => {
  try {
    // First, attempt to fetch the user to see if they exist
    const user = await getUserById(userId);
    if (!user) {
      // If the user does not exist, throw an error
      throw new Error(`User with ID ${userId} does not exist.`);
    }

    // If the user exists, proceed to delete
    const { rows: [deletedUser] } = await pool.query(
      `DELETE FROM users WHERE user_id = $1 RETURNING *;`,
      [userId]
    );

    // Check if the deletedUser is not undefined
    if (!deletedUser) {
      throw new Error(`Unable to delete user with ID ${userId}.`);
    }

    console.log(`User with ID ${userId} successfully deleted.`);
    return deletedUser;
  } catch (error) {
    throw new Error(`Error deleting user: ${error.message}`);
  }
};

  


module.exports = {
  createUser,
  getUser,
  getUserById,
  getUserByEmail,
  getAllUsers,
  updateUserById,
  deleteUserById
};
