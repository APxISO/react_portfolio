app.js current
import React, { useState, useEffect } from 'react'; 
import { CssBaseline, ThemeProvider } from "@mui/material";
import { ColorModeContext, useMode } from "./theme";
import Topbar from "./scenes/global/Topbar"
import Header from "./scenes/global/Header";
import Sidebar from "./scenes/global/Sidebar"
import { Route, Routes, useNavigate  } from "react-router-dom";
import MyTaskList from "./scenes/director/myTaskList/MyTaskList";
import TaskProgress from "./scenes/director/taskProgress/TaskProgress";
import PreviousSubmissions from "./scenes/director/previousSubmissions/PreviousSubmissions"
import Staff from "./scenes/director/staff/Staff";
import SingleSurvey from "./components/SingleSurvey";
import ManageTasks from "./scenes/admin/manageTasks/ManageTasks";
import ManageStaff from "./scenes/admin/managaeStaff/ManageStaff";
import AdminTaskProgress from "./scenes/admin/adminTaskProgress/AdminTaskProgress";
import StaffMyTaskList from "./scenes/staff/staffMyTaskList/MyTaskList";
import StaffPreviousSubmissions from "./scenes/staff/staffPreviousSubmissions/StaffPreviousSubmissions";
import Login from "./scenes/login/Login";
import Dashboard from "./scenes/Dashboard";


function App() {
  const [theme, colorMode] = useMode()
  const [user, setUser] = useState(null);
    const [token, setToken] = useState(localStorage.getItem("token") || "");
    const navigate = useNavigate();
    

    const handleUserLogout = () => {
      setUser(null);
      setToken('')
      localStorage.removeItem("token")
      navigate("/Login")
    }

    const handleUserLogin = (userData, userToken) => {
      setUser(userData);
      setToken(userToken);
      localStorage.setItem('token', userToken);
    };

    const fetchUser = async () => {
      const lsToken = localStorage.getItem("token");
  
      if (!lsToken) {
        console.log("No token found, user is not logged in.");
        return; // Exit the function if there's no token
      }

      setToken(lsToken);

      try {
        const response = await fetch(`http://localhost:3001/api/users/me`, {
          headers: {
            Authorization: `Bearer ${lsToken}`,
          },
        });

        const data = await response.json();
        console.log(data);

        if (!data.error) {
          setUser(data);
        } else {
          console.error(data.error);
        }
      } catch (error) {
        console.error("Error fetching user data:", error);
      }
    };


    useEffect(() => {
      fetchUser();
    }, [token]);

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline/>
    <div className="app">
      <Sidebar user={user} setUser={setUser} setToken={setToken} token={token} handleUserLogout={handleUserLogout}/>
      <main className="content">
        {/* <Header/> */}
        <Topbar/> 
        <Routes>
        <Route path="/" element={<Dashboard/>}/>
        <Route path="/mytasklist" element={<MyTaskList />} />
        <Route path="/taskProgress" element={<TaskProgress />} />
        <Route path="/previousSubmissions" element={<PreviousSubmissions />} />
        <Route path="/staff" element={<Staff />} />
        <Route path="/singleSurvey" element={<SingleSurvey />} />
        <Route path="/manageTasks" element={<ManageTasks />} />
        <Route path="/manageStaff" element={<ManageStaff />} />
        <Route path="/adminTaskProgress" element={<AdminTaskProgress />} />
        <Route path="/staffMyTaskList" element={<StaffMyTaskList />} />
        <Route path="/staffPreviousSubmissions" element={<StaffPreviousSubmissions />} />
        <Route path="/login" element={<Login handleUserLogin={handleUserLogin} />} />
        </Routes> 
      </main>
    </div>
    </ThemeProvider>
    </ColorModeContext.Provider>
  );
}

export default App;

*** updated app.js***
import React, { useState, useEffect } from 'react';
import { CssBaseline, ThemeProvider } from "@mui/material";
import { ColorModeContext, useMode } from "./theme";
import Topbar from "./scenes/global/Topbar";
import Sidebar from "./scenes/global/Sidebar";
import { Route, Routes, Navigate } from "react-router-dom"; // Import Navigate
import MyTaskList from "./scenes/director/myTaskList/MyTaskList";
import TaskProgress from "./scenes/director/taskProgress/TaskProgress";
import PreviousSubmissions from "./scenes/director/previousSubmissions/PreviousSubmissions";
import Staff from "./scenes/director/staff/Staff";
import SingleSurvey from "./components/SingleSurvey";
import ManageTasks from "./scenes/admin/manageTasks/ManageTasks";
import ManageStaff from "./scenes/admin/managaeStaff/ManageStaff";
import AdminTaskProgress from "./scenes/admin/adminTaskProgress/AdminTaskProgress";
import StaffMyTaskList from "./scenes/staff/staffMyTaskList/MyTaskList";
import StaffPreviousSubmissions from "./scenes/staff/staffPreviousSubmissions/StaffPreviousSubmissions";
import Login from "./scenes/login/Login";
import Dashboard from "./scenes/Dashboard";

function App() {
  const [theme, colorMode] = useMode();
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem("token") || "");

  const handleUserLogout = () => {
    setUser(null);
    setToken('');
    localStorage.removeItem("token");
  };

  const handleUserLogin = (userData, userToken) => {
    setUser(userData);
    setToken(userToken);
    localStorage.setItem('token', userToken);
  };

  const fetchUser = async () => {
    const lsToken = localStorage.getItem("token");

    if (!lsToken) {
      console.log("No token found, user is not logged in.");
      return; // Exit the function if there's no token
    }

    setToken(lsToken);

    try {
      const response = await fetch(`http://localhost:3001/api/users/me`, {
        headers: {
          Authorization: `Bearer ${lsToken}`,
        },
      });

      const data = await response.json();
      if (!data.error) {
        setUser(data);
      } else {
        console.error(data.error);
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
    }
  };

  useEffect(() => {
    fetchUser();
  }, [token]);

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <div className="app">
          <Sidebar user={user} handleUserLogout={handleUserLogout} />
          <main className="content">
            <Topbar /> 
            <Routes>
              {token ? (
                <>
                  <Route path="/" element={<Dashboard />} />
                  <Route path="/mytasklist" element={<MyTaskList />} />
                  <Route path="/taskProgress" element={<TaskProgress />} />
                  <Route path="/previousSubmissions" element={<PreviousSubmissions />} />
                  <Route path="/staff" element={<Staff />} />
                  <Route path="/singleSurvey" element={<SingleSurvey />} />
                  <Route path="/manageTasks" element={<ManageTasks />} />
                  <Route path="/manageStaff" element={<ManageStaff />} />
                  <Route path="/adminTaskProgress" element={<AdminTaskProgress />} />
                  <Route path="/staffMyTaskList" element={<StaffMyTaskList />} />
<Route path="/staffPreviousSubmissions" element={<StaffPreviousSubmissions />} />
{/* Redirect to dashboard or a specific page based on user role if needed /}
</>
) : (
<>
{/ Redirect to Login if no token is present /}
<Route path="/login" element={<Login handleUserLogin={handleUserLogin} />} />
{/ Redirect any other route to Login if not authenticated /}
<Route path="" element={<Navigate to="/login" replace />} />
</>
)}
</Routes>
</main>
</div>
</ThemeProvider>
</ColorModeContext.Provider>
);
}

export default App;


*********************

updated login:

import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const Login = ({ handleUserLogin }) => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await fetch('/api/login', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ email, password }),
      });

      if (!response.ok) {
        throw new Error('Login failed');
      }

      const { user, token } = await response.json();

      handleUserLogin(user, token); // Set user state in App.js

      // Navigate based on user.role_name
      if (user.role_name === 'Admin') {
        navigate('/AdminTaskProgress');
      } else if (user.role_name === 'Dir') {
        navigate('/TaskProgress');
      } else if (user.role_name === 'Staff') {
        navigate('/StaffTaskProgress');
      }
    } catch (error) {
      console.error('Login error:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      {/* Email input */}
      {/* Password input */}
      {/* Submit button */}
    </form>
  );
};

export default Login;


updated***
// --client/src/global/Sidebar.jsx--
import React, { useState } from 'react';
import { Box, IconButton, Typography, useTheme } from '@mui/material';
import { Link } from 'react-router-dom';
import { ProSidebar, Menu, MenuItem } from 'react-pro-sidebar';
import 'react-pro-sidebar/dist/css/styles.css';
import { tokens } from '../../theme';
import MenuOutlinedIcon from '@mui/icons-material/MenuOutlined';
import ListAltOutlinedIcon from '@mui/icons-material/ListAltOutlined';
import LeaderboardOutlinedIcon from '@mui/icons-material/LeaderboardOutlined';
import AccessTimeOutlinedIcon from '@mui/icons-material/AccessTimeOutlined';
import PeopleIcon from '@mui/icons-material/People';
import FactCheckOutlinedIcon from '@mui/icons-material/FactCheckOutlined';
import ContactsOutlinedIcon from '@mui/icons-material/ContactsOutlined';
import LoginIcon from '@mui/icons-material/Login';

// Define the Item component for rendering each menu item
const Item = ({ title, to, icon, selected, setSelected, isVisible }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  return isVisible ? (
    <MenuItem
      active={selected === title}
      style={{ color: colors.grey[100] }}
      onClick={() => setSelected(title)}
      icon={icon}
    >
      <Typography>{title}</Typography>
      <Link to={to} />
    </MenuItem>
  ) : null;
};

// Main Sidebar component
const Sidebar = ({ user }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [isCollapsed, setIsCollapsed] = useState(false);
  const [selected, setSelected] = useState('');

  // Function to check if a menu item should be visible based on the user's role
  const checkRole = (roles) => {
    return user && roles.includes(user.role_name);
  };

  return (
    <Box
      sx={{
        '& .pro-sidebar-inner': {
          background: `${colors.primary[400]} !important`,
        },
        '& .pro-icon-wrapper': {
          backgroundColor: 'transparent !important',
        },
        '& .pro-inner-item': {
          padding: '5px 35px 5px 20px !important',
        },
        '& .pro-inner-item:hover': {
          color: '#868dfb !important',
        },
        '& .pro-menu-item.active': {
          color: '#6870fa !important',
        },
      }}
    >
      <ProSidebar collapsed={isCollapsed}>
        <Menu iconShape="square">
          <MenuItem
            onClick={() => setIsCollapsed(!isCollapsed)}
            icon={<MenuOutlinedIcon />}
            style={{ margin: '10px 0 20px 0', color: colors.grey[100] }}
          >
            {!isCollapsed && (
              <Box
                display="flex"
                justifyContent="space-between"
                alignItems="center"
                ml="15px"
              >
                <Typography variant="h5" color={colors.grey[100]}>
                  Menu
                </Typography>
                <IconButton onClick={() => setIsCollapsed(!isCollapsed)}>
                  <MenuOutlinedIcon />
                </IconButton>
              </Box>
            )}
          </MenuItem>

          {/* Dynamically render menu items based on the user's role */}
          <Box paddingLeft={isCollapsed ? undefined : '10%'}>
            <Item
              title="My Task List"
              to="/mytasklist"
              icon={<ListAltOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
            <Item
              title="Task Progress"
              to="/taskprogress"
              icon={<LeaderboardOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
            <Item
              title="Previous Submissions"
              to="/previoussubmissions"
              icon={<AccessTimeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
            <Item
              title="Manage Staff"
              to="/staff"
              icon={<PeopleIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
            {/* Admin specific items */}
            <Item
              title="ADMIN Manage Tasks"
              to="/managetasks"
              icon={<FactCheckOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Admin'])}
            />
            <Item
              title="ADMIN Manage Staff"
              to="/managestaff"
              icon={<ContactsOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Admin'])}
            />
            <Item
              title="ADMIN Task Progress"
              to="/admintaskprogress"
              icon={<LeaderboardOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Admin'])}
            />
            {/* Staff specific items */}
            <Item
              title="STAFF My Task List"
              to="/staffmytasklist"
              icon={<ListAltOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Staff'])}
            />
            <Item
              title="STAFF Previous Submissions"
              to="/staffprevioussubmissions"
              icon={<AccessTimeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Staff'])}
            />
            <Item
              title="Login"
              to="/login"
              icon={<LoginIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={!user} // Show only if the user is not logged in
            />
          </Box>
        </Menu>
      </ProSidebar>
    </Box>
  );
};

export default Sidebar;


***Sidebar with collapse feature removed***

import React from 'react';
import { Box, Typography, useTheme } from '@mui/material';
import { Link } from 'react-router-dom';
import { ProSidebar, Menu, MenuItem } from 'react-pro-sidebar';
import 'react-pro-sidebar/dist/css/styles.css';
import { tokens } from '../../theme';
import ListAltOutlinedIcon from '@mui/icons-material/ListAltOutlined';
import LeaderboardOutlinedIcon from '@mui/icons-material/LeaderboardOutlined';
import AccessTimeOutlinedIcon from '@mui/icons-material/AccessTimeOutlined';
import PeopleIcon from '@mui/icons-material/People';
import FactCheckOutlinedIcon from '@mui/icons-material/FactCheckOutlined';
import ContactsOutlinedIcon from '@mui/icons-material/ContactsOutlined';
import ExitToAppIcon from '@mui/icons-material/ExitToApp'; // Icon for logout

// Define the Item component for rendering each menu item
const Item = ({ title, to, icon, selected, setSelected, isVisible, onClick }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  return isVisible ? (
    <MenuItem
      active={selected === title}
      style={{ color: colors.grey[100] }}
      onClick={() => {
        setSelected(title);
        if (onClick) onClick();
      }}
      icon={icon}
    >
      <Link to={to} style={{ color: colors.grey[100], textDecoration: 'none' }}>
        <Typography>{title}</Typography>
      </Link>
    </MenuItem>
  ) : null;
};

// Main Sidebar component
const Sidebar = ({ user, handleLogout }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [selected, setSelected] = React.useState('');

  // Function to check if a menu item should be visible based on the user's role
  const checkRole = (roles) => {
    return user && roles.includes(user.role_name);
  };

  return (
    <Box
      sx={{
        '& .pro-sidebar-inner': {
          background: `${colors.primary[400]} !important`,
        },
        '& .pro-icon-wrapper': {
          backgroundColor: 'transparent !important',
        },
        '& .pro-inner-item': {
          padding: '5px 35px 5px 20px !important',
        },
        '& .pro-inner-item:hover': {
          color: '#868dfb !important',
        },
        '& .pro-menu-item.active': {
          color: '#6870fa !important',
        },
      }}
    >
      <ProSidebar>
        <Menu iconShape="square">
          {/* Your conditional items based on the user's role here */}
          <Item
            title="My Task List"
            to="/mytasklist"
            icon={<ListAltOutlinedIcon />}
            selected={selected}
            setSelected={setSelected}
            isVisible={checkRole(['Dir'])}
          />
          {/* Add more Items based on your application's needs */}

          {/* Logout functionality for logged-in users */}
          {user && (
            <Item
              title="Log Out"
              to="/login" // Assuming you have a route to redirect to on logout
              icon={<ExitToAppIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={!!user}
              onClick={handleLogout}
            />
          )}
        </Menu>
      </ProSidebar>
    </Box>
  );
};

export default Sidebar;


