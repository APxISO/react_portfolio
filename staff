current try 330pm:
import React, { useEffect, useState } from 'react';
import { Box, useTheme, IconButton, Button } from "@mui/material";
import InputBase from "@mui/material/InputBase";
import { DataGrid } from "@mui/x-data-grid";
import { tokens } from "../../../theme";
import Header from "../../../components/Header";
import SearchIcon from "@mui/icons-material/Search";

const Staff = ({ user }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [users, setUsers] = useState([]);

  useEffect(() => {
    // Guard clause to check if user or user.parent_tourn is undefined
    if (!user || typeof user.parent_tourn === 'undefined') {
      console.log('User data is not yet available');
      return;
    }

    const fetchUsers = async () => {
      try {
        const response = await fetch('http://localhost:3001/api/users');
        const data = await response.json();
        if (data) {
          // Use optional chaining to safely access user.parent_tourn
          const staffUnderDirector = data.filter(u => u.parent_tourn === user?.parent_tourn);
          setUsers(staffUnderDirector);
        }
      } catch (error) {
        console.error("Error fetching users:", error);
      }
    };
    
    fetchUsers();
  }, [user?.parent_tourn]); // Use optional chaining in dependency array as well

  // Columns definition remains the same

  // Render function remains the same
};

export default Staff;


app.js

<Route path="/staff" element={user ? <Staff user={user} /> : <div>Loading...</div>} />



********************************************************
import { Box, Typography, useTheme, IconButton } from "@mui/material";
import InputBase from "@mui/material/InputBase";
import { DataGrid } from "@mui/x-data-grid";
import { tokens } from "../../../theme";
import { mockDataContacts } from "../../../data/mockData";
import Header from "../../../components/Header";
import Button from "@mui/material/Button"; 
import SearchIcon from "@mui/icons-material/Search";


const Staff = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  const filteredTasks = mockDataContacts.filter(contact => contact.role === "Staff"); const columns = [
    
    
    { field: "id", headerName: "ID" },
    {
      field: "name",
      headerName: "NAME",
      flex: 1,
      cellClassName: "name-column--cell",
    },
    {
      field: "department",
      headerName: "DEPARTMENT",
      flex: 1,
      type: "string",
      
    },
    {
      field: "email",
      headerName: "EMAIL",
      flex: 1,
    },
    {
      field: "role",
      headerName: "ROLE",
      flex: 1,
    },
    { 
        field: "actions", 
        headerName: "ACTIONS", 
        flex: 1, 
        renderCell: (params) => { 
            return ( 
                <div> 
                    <Button 
                        variant="contained" 
                        color="secondary" 
                        onClick={() => {/* Implement Assign Action */}} > 
                        Assign Task
                    </Button> 
                </div> 
            ); 
        }, 
    }, 
];

  return (
    <Box m="20px">
      <Header title="STAFF"/>

     {/* SEARCH BAR */}
     <Box
        display="flex"
        backgroundColor={colors.primary[400]}
        borderRadius="3px"
        justifyContent="left"
        width="13%"
        boxShadow= 'rgba(0, 0, 0, 0.24) 0px 3px 8px'
      >
        <InputBase sx={{ ml: 2, flex: 1 }} placeholder="Search" />
        <IconButton type="button" sx={{ p: 1 }}>
          <SearchIcon />
        </IconButton>
      </Box>
      
        {/* MAIN GRID */}

      <Box
        m="40px 0 0 0"
        height="65vh"
        boxShadow= 'rgba(0, 0, 0, 0.24) 0px 3px 8px'
        sx={{
          "& .MuiDataGrid-root": {
            border: "none",
          },
          "& .MuiDataGrid-cell": {
            borderBottom: "none",
          },
          "& .name-column--cell": {
            color: colors.greenAccent[300],
          },
          "& .MuiDataGrid-columnHeaders": {
            backgroundColor: colors.blueAccent[700],
            borderBottom: "none",
          },
          "& .MuiDataGrid-virtualScroller": {
            backgroundColor: colors.primary[400],
          },
          "& .MuiDataGrid-footerContainer": {
            borderTop: "none",
            backgroundColor: colors.blueAccent[700],
          },
          "& .MuiCheckbox-root": {
            color: `${colors.greenAccent[200]} !important`,
          },
        }}
      >
        <DataGrid checkboxSelection rows={filteredTasks} columns={columns} /> 
      </Box>
    </Box>
  );
};

export default Staff;


app.js

import React, { useState, useEffect } from 'react';
import { CssBaseline, ThemeProvider } from "@mui/material";
import { ColorModeContext, useMode } from "./theme";
import Topbar from "./scenes/global/Topbar";
import Sidebar from "./scenes/global/Sidebar";
import { Route, Routes, Navigate } from "react-router-dom";
import MyTaskList from "./scenes/director/myTaskList/MyTaskList";
import TaskProgress from "./scenes/director/taskProgress/TaskProgress";
import PreviousSubmissions from "./scenes/director/previousSubmissions/PreviousSubmissions";
import Staff from "./scenes/director/staff/Staff";
import SingleSurvey from "./components/SingleSurvey";
import ManageTasks from "./scenes/admin/manageTasks/ManageTasks";
import ManageStaff from "./scenes/admin/managaeStaff/ManageStaff";
import AdminTaskProgress from "./scenes/admin/adminTaskProgress/AdminTaskProgress";
import StaffMyTaskList from "./scenes/staff/staffMyTaskList/MyTaskList";
import StaffPreviousSubmissions from "./scenes/staff/staffPreviousSubmissions/StaffPreviousSubmissions";
import Login from "./scenes/login/Login";
import Dashboard from "./scenes/Dashboard";

function App() {
  const [theme, colorMode] = useMode();
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem("token") || "");

  const handleUserLogout = () => {
    setUser(null);
    setToken('');
    localStorage.removeItem("token");
  };

  const handleUserLogin = (userData, userToken) => {
    setUser(userData);
    setToken(userToken);
    localStorage.setItem('token', userToken);
  };

  const fetchUser = async () => {
    const lsToken = localStorage.getItem("token");

    if (!lsToken) {
      console.log("No token found, user is not logged in.");
      return; // Exit the function if there's no token
    }

    setToken(lsToken);

    try {
      const response = await fetch(`http://localhost:3001/api/users/me`, {
        headers: {
          Authorization: `Bearer ${lsToken}`,
        },
      });

      const data = await response.json();
      if (!data.error) {
        setUser(data);
      } else {
        console.error(data.error);
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
    }
  };

  useEffect(() => {
    fetchUser();
  }, [token]);

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <div className="app">
          <Sidebar user={user} handleUserLogout={handleUserLogout} />
          <main className="content">
            <Topbar /> 
            <Routes>
              {token ? (
                <>
                  <Route path="/Dashboard" element={<Dashboard user={user} />} />
                  <Route path="/mytasklist" element={<MyTaskList />} />
                  <Route path="/taskProgress" element={<TaskProgress />} />
                  <Route path="/previousSubmissions" element={<PreviousSubmissions />} />
                  <Route path="/staff" element={<Staff />} />
                  <Route path="/singleSurvey" element={<SingleSurvey />} />
                  <Route path="/manageTasks" element={<ManageTasks />} />
                  <Route path="/manageStaff" element={<ManageStaff />} />
                  <Route path="/adminTaskProgress" element={<AdminTaskProgress />} />
                  <Route path="/staffMyTaskList" element={<StaffMyTaskList />} />
                  <Route path="/staffPreviousSubmissions" element={<StaffPreviousSubmissions />} />

                </>
            ) : (
              <>

              <Route path="/login" element={<Login handleUserLogin={handleUserLogin} />} />

              <Route path="" element={<Navigate to="/login" replace />} />
              </>
          )}
          </Routes>
          </main>
          </div>
          </ThemeProvider>
          </ColorModeContext.Provider>
          );
          }

export default App;


***************************************

updated Satff component:

import React, { useEffect, useState } from 'react';
import { Box, useTheme, IconButton, Button } from "@mui/material";
import InputBase from "@mui/material/InputBase";
import { DataGrid } from "@mui/x-data-grid";
import { tokens } from "../../../theme";
import Header from "../../../components/Header";
import SearchIcon from "@mui/icons-material/Search";

const Staff = ({ user }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [users, setUsers] = useState([]);

  useEffect(() => {
    const fetchUsers = async () => {
      const response = await fetch('http://localhost:3001/api/users');
      const data = await response.json();
      if (data) {
        // Assuming the 'user' prop contains the director's details including parent_tourn
        const staffUnderDirector = data.filter(u => u.parent_tourn === user.parent_tourn);
        setUsers(staffUnderDirector);
      }
    };
    fetchUsers();
  }, [user.parent_tourn]); // Dependency array to refetch when user.parent_tourn changes

  const columns = [
    { field: "id", headerName: "ID" },
    {
      field: "name",
      headerName: "NAME",
      flex: 1,
      cellClassName: "name-column--cell",
    },
    {
      field: "department",
      headerName: "DEPARTMENT",
      flex: 1,
      type: "string",
    },
    {
      field: "email",
      headerName: "EMAIL",
      flex: 1,
    },
    {
      field: "role",
      headerName: "ROLE",
      flex: 1,
    },
    { 
      field: "actions", 
      headerName: "ACTIONS", 
      flex: 1, 
      renderCell: (params) => { 
          return ( 
              <div> 
                  <Button 
                      variant="contained" 
                      color="secondary" 
                      onClick={() => {/* Implement Assign Action */}} > 
                      Assign Task
                  </Button> 
              </div> 
          ); 
      }, 
    },
  ];

  return (
    <Box m="20px">
      <Header title="STAFF"/>

     {/* SEARCH BAR */}
     <Box
        display="flex"
        backgroundColor={colors.primary[400]}
        borderRadius="3px"
        justifyContent="left"
        width="13%"
        boxShadow= 'rgba(0, 0, 0, 0.24) 0px 3px 8px'
      >
        <InputBase sx={{ ml: 2, flex: 1 }} placeholder="Search" />
        <IconButton type="button" sx={{ p: 1 }}>
          <SearchIcon />
        </IconButton>
      </Box>
      
        {/* MAIN GRID */}

      <Box
        m="40px 0 0 0"
        height="65vh"
        boxShadow= 'rgba(0, 0, 0, 0.24) 0px 3px 8px'
        sx={{
          "& .MuiDataGrid-root": {
            border: "none",
          },
          "& .MuiDataGrid-cell": {
            borderBottom: "none",
          },
          "& .name-column--cell": {
            color: colors.greenAccent[300],
          },
          "& .MuiDataGrid-columnHeaders": {
            backgroundColor: colors.blueAccent[700],
            borderBottom: "none",
          },
          "& .MuiDataGrid-virtualScroller": {
            backgroundColor: colors.primary[400],
          },
          "& .MuiDataGrid-footerContainer": {
            borderTop: "none",
            backgroundColor: colors.blueAccent[700],
          },
          "& .MuiCheckbox-root": {
            color: `${colors.greenAccent[200]} !important`,
          },
        }}
      >
        <DataGrid checkboxSelection rows={users} columns={columns} /> 
      </Box>
    </Box>
  );
};

export default Staff;


error:

ERROR
Cannot read properties of null (reading 'parent_tourn')
TypeError: Cannot read properties of null (reading 'parent_tourn')
    at Staff (http://localhost:3000/main.2268b7af46145f579277.hot-update.js:57:12)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:90571:22)
    at mountIndeterminateComponent (http://localhost:3000/static/js/bundle.js:93855:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:95151:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:80167:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:80211:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:80268:35)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:100132:11)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:99380:16)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:99303:9)
ERROR
Cannot read properties of null (reading 'parent_tourn')
TypeError: Cannot read properties of null (reading 'parent_tourn')
    at Staff (http://localhost:3000/main.2268b7af46145f579277.hot-update.js:57:12)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:90571:22)
    at mountIndeterminateComponent (http://localhost:3000/static/js/bundle.js:93855:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:95151:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:80167:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:80211:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:80268:35)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:100132:11)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:99380:16)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:99303:9)
ERROR
Cannot read properties of null (reading 'parent_tourn')
TypeError: Cannot read properties of null (reading 'parent_tourn')
    at Staff (http://localhost:3000/main.2268b7af46145f579277.hot-update.js:57:12)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:90571:22)
    at mountIndeterminateComponent (http://localhost:3000/static/js/bundle.js:93855:17)
    at beginWork (http://localhost:3000/static/js/bundle.js:95151:20)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:100110:18)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:99380:16)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:99303:9)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:99276:11)
    at recoverFromConcurrentError (http://localhost:3000/static/js/bundle.js:98768:24)
    at performSyncWorkOnRoot (http://localhost:3000/static/js/bundle.js:98977:24)



app.js api call for fetch user payload via the terminal:

A request is being made to /users...
Token verified, user ID: 9
Fetching user details for ID: 9
User details found: {
  user_id: 9,
  username: 'Test User 2',
  email: 'AnotherTest123@pgatour.com',
  role_name: 'Dir',
  isadmin: false,
  parent_tourn: 1
}


app.js

import React, { useState, useEffect } from 'react';
import { CssBaseline, ThemeProvider } from "@mui/material";
import { ColorModeContext, useMode } from "./theme";
import Topbar from "./scenes/global/Topbar";
import Sidebar from "./scenes/global/Sidebar";
import { Route, Routes, Navigate } from "react-router-dom";
import MyTaskList from "./scenes/director/myTaskList/MyTaskList";
import TaskProgress from "./scenes/director/taskProgress/TaskProgress";
import PreviousSubmissions from "./scenes/director/previousSubmissions/PreviousSubmissions";
import Staff from "./scenes/director/staff/Staff";
import SingleSurvey from "./components/SingleSurvey";
import ManageTasks from "./scenes/admin/manageTasks/ManageTasks";
import ManageStaff from "./scenes/admin/managaeStaff/ManageStaff";
import AdminTaskProgress from "./scenes/admin/adminTaskProgress/AdminTaskProgress";
import StaffMyTaskList from "./scenes/staff/staffMyTaskList/MyTaskList";
import StaffPreviousSubmissions from "./scenes/staff/staffPreviousSubmissions/StaffPreviousSubmissions";
import Login from "./scenes/login/Login";
import Dashboard from "./scenes/Dashboard";

function App() {
  const [theme, colorMode] = useMode();
  const [user, setUser] = useState(null);
  const [token, setToken] = useState(localStorage.getItem("token") || "");

  const handleUserLogout = () => {
    setUser(null);
    setToken('');
    localStorage.removeItem("token");
  };

  const handleUserLogin = (userData, userToken) => {
    setUser(userData);
    setToken(userToken);
    localStorage.setItem('token', userToken);
  };

  const fetchUser = async () => {
    const lsToken = localStorage.getItem("token");

    if (!lsToken) {
      console.log("No token found, user is not logged in.");
      return; // Exit the function if there's no token
    }

    setToken(lsToken);

    try {
      const response = await fetch(`http://localhost:3001/api/users/me`, {
        headers: {
          Authorization: `Bearer ${lsToken}`,
        },
      });

      const data = await response.json();
      if (!data.error) {
        setUser(data);
      } else {
        console.error(data.error);
      }
    } catch (error) {
      console.error("Error fetching user data:", error);
    }
  };

  useEffect(() => {
    fetchUser();
  }, [token]);

  return (
    <ColorModeContext.Provider value={colorMode}>
      <ThemeProvider theme={theme}>
        <CssBaseline />
        <div className="app">
          <Sidebar user={user} handleUserLogout={handleUserLogout} />
          <main className="content">
            <Topbar /> 
            <Routes>
              {token ? (
                <>
                  <Route path="/Dashboard" element={<Dashboard user={user} />} />
                  <Route path="/mytasklist" element={<MyTaskList />} />
                  <Route path="/taskProgress" element={<TaskProgress />} />
                  <Route path="/previousSubmissions" element={<PreviousSubmissions />} />
                  <Route path="/staff" element={<Staff user={user} />} />
                  <Route path="/singleSurvey" element={<SingleSurvey />} />
                  <Route path="/manageTasks" element={<ManageTasks />} />
                  <Route path="/manageStaff" element={<ManageStaff />} />
                  <Route path="/adminTaskProgress" element={<AdminTaskProgress />} />
                  <Route path="/staffMyTaskList" element={<StaffMyTaskList />} />
                  <Route path="/staffPreviousSubmissions" element={<StaffPreviousSubmissions />} />

                </>
            ) : (
              <>

              <Route path="/login" element={<Login handleUserLogin={handleUserLogin} />} />

              <Route path="" element={<Navigate to="/login" replace />} />
              </>
          )}
          </Routes>
          </main>
          </div>
          </ThemeProvider>
          </ColorModeContext.Provider>
          );
          }

export default App;

