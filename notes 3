***Updated dashboard***

import React from 'react';
import { Box, Typography, useTheme } from "@mui/material";
import { tokens } from "../theme";
import Header from "../components/Header"; // Ensure this component exists or adjust accordingly

const Dashboard = ({ user }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  // Ensure you pass 'user' prop to Dashboard when rendering it in your app
  
  return (
    <Box m="20px" sx={{ color: colors.grey[100] }}>
      {/* Personalized Greeting */}
      <Box textAlign="center" mb={5}>
        <Typography variant="h4" gutterBottom>Welcome to the Dashboard, {user?.username}!</Typography>
        <Typography variant="h6">You can navigate around the app from the sidebar on the left.</Typography>
      </Box>
      
      {/* Stylish and fun section - Example of what you can add */}
      <Box textAlign="center">
        <Header title="Explore" subtitle="Start by exploring the features available to you." />
        <Typography variant="body1" sx={{ mt: 2 }}>
          Use the sidebar to access different sections of the app, manage tasks, view progress, and more. Have fun!
        </Typography>
      </Box>

      {/* You can also include any other information or widgets you find necessary for your users */}
    </Box>
  );
};

export default Dashboard;





***********************


dashboard.jsx

import { Box, useTheme } from "@mui/material";
import { DataGrid } from "@mui/x-data-grid";
import { tokens } from "../theme";
import { mockTaskData } from "../../src/data/mockData";
import Header from "../components/Header";
import Button from "@mui/material/Button"; 

const Dashboard = () => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);

  const filteredTasks = mockTaskData.filter(task => task.assignmentStatus === "Assigned"); const columns = [
    
    
    { field: "id", headerName: "ID" },
    {
      field: "taskName",
      headerName: "TASK NAME",
      flex: 1,
      cellClassName: "name-column--cell",
    },
    {
      field: "description",
      headerName: "DESCRIPTION",
      flex: 1,
      type: "string",
      
    },
    {
      field: "status",
      headerName: "STATUS",
      flex: 1,
    },
    {
      field: "dueDate",
      headerName: "DUE DATE",
      flex: 1,
    },
    { 
        field: "actions", 
        headerName: "ACTIONS", 
        flex: 1, 
        renderCell: (params) => { 
            return ( 
                <div> 
                    <Button 
                        variant="contained" 
                        color="primary" 
                        onClick={() => {/* Implement Take Survey Action */}} > 
                        Take Survey 
                    </Button> 
                    <Button 
                        variant="contained" 
                        color="secondary" 
                        onClick={() => {/* Implement Assign Action */}} 
                        style={{ marginLeft: 10 }} > 
                        Assign 
                    </Button> 
                </div> 
            ); 
        }, 
    }, 
];

  return (
    <Box  m="20px">
      <Header title="CURRENT TASKS" subtitle="The below tasks have been assigned to you." />
      <Box
        m="40px 0 0 0"
        height="65vh"
        boxShadow= 'rgba(0, 0, 0, 0.24) 0px 3px 8px'
        sx={{
          "& .MuiDataGrid-root": {
            border: "none",
          },
          "& .MuiDataGrid-cell": {
            borderBottom: "none",
          },
          "& .name-column--cell": {
            color: colors.greenAccent[300],
          },
          "& .MuiDataGrid-columnHeaders": {
            backgroundColor: colors.blueAccent[700],
            borderBottom: "none",
          },
          "& .MuiDataGrid-virtualScroller": {
            backgroundColor: colors.primary[400],
          },
          "& .MuiDataGrid-footerContainer": {
            borderTop: "none",
            backgroundColor: colors.blueAccent[700],
          },
          "& .MuiCheckbox-root": {
            color: `${colors.greenAccent[200]} !important`,
          },
        }}
      >
        <DataGrid checkboxSelection rows={filteredTasks} columns={columns} /> 
      </Box>
    </Box>
  );
};

export default Dashboard;


*current sidebar*

import React from 'react';
import { Box, Typography, useTheme } from '@mui/material';
import { Link } from 'react-router-dom';
import { ProSidebar, Menu, MenuItem } from 'react-pro-sidebar';
import 'react-pro-sidebar/dist/css/styles.css';
import { tokens } from '../../theme';
import ListAltOutlinedIcon from '@mui/icons-material/ListAltOutlined';
import LeaderboardOutlinedIcon from '@mui/icons-material/LeaderboardOutlined';
import AccessTimeOutlinedIcon from '@mui/icons-material/AccessTimeOutlined';
import PeopleIcon from '@mui/icons-material/People';
import FactCheckOutlinedIcon from '@mui/icons-material/FactCheckOutlined';
import ContactsOutlinedIcon from '@mui/icons-material/ContactsOutlined';
import ExitToAppIcon from '@mui/icons-material/ExitToApp'; // Icon for logout
import LoginIcon from '@mui/icons-material/Login';

// Define the Item component for rendering each menu item
const Item = ({ title, to, icon, selected, setSelected, isVisible, onClick }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  return isVisible ? (
    <MenuItem
      active={selected === title}
      style={{ color: colors.grey[100] }}
      onClick={() => {
        setSelected(title);
        if (onClick) onClick();
      }}
      icon={icon}
    >
      <Link to={to} style={{ color: colors.grey[100], textDecoration: 'none' }}>
        <Typography>{title}</Typography>
      </Link>
    </MenuItem>
  ) : null;
};

// Main Sidebar component
const Sidebar = ({ user, handleUserLogout }) => {
  const theme = useTheme();
  const colors = tokens(theme.palette.mode);
  const [selected, setSelected] = React.useState('');

  // Function to check if a menu item should be visible based on the user's role
  const checkRole = (roles) => {
    return user && roles.includes(user.role_name);
  };

  return (
    <Box
      sx={{
        '& .pro-sidebar-inner': {
          background: `${colors.primary[400]} !important`,
        },
        '& .pro-icon-wrapper': {
          backgroundColor: 'transparent !important',
        },
        '& .pro-inner-item': {
          padding: '5px 35px 5px 20px !important',
        },
        '& .pro-inner-item:hover': {
          color: '#868dfb !important',
        },
        '& .pro-menu-item.active': {
          color: '#6870fa !important',
        },
      }}
    >
      <ProSidebar >
        <Menu iconShape="square">
          {/* Your conditional items based on the user's role here */}
          <Item
              title="Task Progress"
              to="/taskprogress"
              icon={<LeaderboardOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
          <Item
            title="My Task List"
            to="/mytasklist"
            icon={<ListAltOutlinedIcon />}
            selected={selected}
            setSelected={setSelected}
            isVisible={checkRole(['Dir'])}
          />
            <Item
              title="Previous Submissions"
              to="/previoussubmissions"
              icon={<AccessTimeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
            <Item
              title="Manage Staff"
              to="/staff"
              icon={<PeopleIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Dir'])}
            />
            {/* Admin specific items */}
            <Item
              title="ADMIN Task Progress"
              to="/admintaskprogress"
              icon={<LeaderboardOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Admin'])}
            />
            <Item
              title="ADMIN Manage Tasks"
              to="/managetasks"
              icon={<FactCheckOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Admin'])}
            />
            <Item
              title="ADMIN Manage Staff"
              to="/managestaff"
              icon={<ContactsOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Admin'])}
            />
            
            {/* Staff specific items */}
            <Item
              title="STAFF My Task List"
              to="/staffmytasklist"
              icon={<ListAltOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Staff'])}
            />
            <Item
              title="STAFF Previous Submissions"
              to="/staffprevioussubmissions"
              icon={<AccessTimeOutlinedIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={checkRole(['Staff'])}
            />
            <Item
              title="Login"
              to="/login"
              icon={<LoginIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={!user} // Show only if the user is not logged in
            />
          {/* Logout functionality for logged-in users */}
          {user && (
            <Item
              title="Log Out"
              to="/login" // Assuming you have a route to redirect to on logout
              icon={<ExitToAppIcon />}
              selected={selected}
              setSelected={setSelected}
              isVisible={!!user}
              onClick={handleUserLogout}
            />
          )}
        </Menu>
      </ProSidebar>
    </Box>
  );
};

export default Sidebar;
